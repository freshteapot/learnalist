// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import alist "github.com/freshteapot/learnalist-api/server/api/alist"
import authenticate "github.com/freshteapot/learnalist-api/server/api/authenticate"
import mock "github.com/stretchr/testify/mock"
import models "github.com/freshteapot/learnalist-api/server/api/models"
import oauth "github.com/freshteapot/learnalist-api/server/pkg/oauth"
import user "github.com/freshteapot/learnalist-api/server/pkg/user"
import uuid "github.com/freshteapot/learnalist-api/server/api/uuid"

// Datastore is an autogenerated mock type for the Datastore type
type Datastore struct {
	mock.Mock
}

// GetAlist provides a mock function with given fields: _a0
func (_m *Datastore) GetAlist(_a0 string) (*alist.Alist, error) {
	ret := _m.Called(_a0)

	var r0 *alist.Alist
	if rf, ok := ret.Get(0).(func(string) *alist.Alist); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*alist.Alist)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetListsByUserWithFilters provides a mock function with given fields: _a0, labels, listType
func (_m *Datastore) GetListsByUserWithFilters(_a0 string, labels string, listType string) []*alist.Alist {
	ret := _m.Called(_a0, labels, listType)

	var r0 []*alist.Alist
	if rf, ok := ret.Get(0).(func(string, string, string) []*alist.Alist); ok {
		r0 = rf(_a0, labels, listType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*alist.Alist)
		}
	}

	return r0
}

// GetUserByCredentials provides a mock function with given fields: loginUser
func (_m *Datastore) GetUserByCredentials(loginUser authenticate.LoginUser) (*uuid.User, error) {
	ret := _m.Called(loginUser)

	var r0 *uuid.User
	if rf, ok := ret.Get(0).(func(authenticate.LoginUser) *uuid.User); ok {
		r0 = rf(loginUser)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*uuid.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(authenticate.LoginUser) error); ok {
		r1 = rf(loginUser)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserLabels provides a mock function with given fields: _a0
func (_m *Datastore) GetUserLabels(_a0 string) ([]string, error) {
	ret := _m.Called(_a0)

	var r0 []string
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertNewUser provides a mock function with given fields: loginUser
func (_m *Datastore) InsertNewUser(loginUser authenticate.LoginUser) (*uuid.User, error) {
	ret := _m.Called(loginUser)

	var r0 *uuid.User
	if rf, ok := ret.Get(0).(func(authenticate.LoginUser) *uuid.User); ok {
		r0 = rf(loginUser)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*uuid.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(authenticate.LoginUser) error); ok {
		r1 = rf(loginUser)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OAuthHandler provides a mock function with given fields:
func (_m *Datastore) OAuthHandler() oauth.OAuthReadWriter {
	ret := _m.Called()

	var r0 oauth.OAuthReadWriter
	if rf, ok := ret.Get(0).(func() oauth.OAuthReadWriter); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(oauth.OAuthReadWriter)
		}
	}

	return r0
}

// PostAlistLabel provides a mock function with given fields: label
func (_m *Datastore) PostAlistLabel(label *models.AlistLabel) (int, error) {
	ret := _m.Called(label)

	var r0 int
	if rf, ok := ret.Get(0).(func(*models.AlistLabel) int); ok {
		r0 = rf(label)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*models.AlistLabel) error); ok {
		r1 = rf(label)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostUserLabel provides a mock function with given fields: label
func (_m *Datastore) PostUserLabel(label *models.UserLabel) (int, error) {
	ret := _m.Called(label)

	var r0 int
	if rf, ok := ret.Get(0).(func(*models.UserLabel) int); ok {
		r0 = rf(label)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*models.UserLabel) error); ok {
		r1 = rf(label)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveAlist provides a mock function with given fields: alist_uuid, user_uuid
func (_m *Datastore) RemoveAlist(alist_uuid string, user_uuid string) error {
	ret := _m.Called(alist_uuid, user_uuid)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(alist_uuid, user_uuid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveUserLabel provides a mock function with given fields: label, _a1
func (_m *Datastore) RemoveUserLabel(label string, _a1 string) error {
	ret := _m.Called(label, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(label, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveAlist provides a mock function with given fields: method, aList
func (_m *Datastore) SaveAlist(method string, aList alist.Alist) (*alist.Alist, error) {
	ret := _m.Called(method, aList)

	var r0 *alist.Alist
	if rf, ok := ret.Get(0).(func(string, alist.Alist) *alist.Alist); ok {
		r0 = rf(method, aList)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*alist.Alist)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, alist.Alist) error); ok {
		r1 = rf(method, aList)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserExists provides a mock function with given fields: userUUID
func (_m *Datastore) UserExists(userUUID string) bool {
	ret := _m.Called(userUUID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(userUUID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// UserFromIDP provides a mock function with given fields:
func (_m *Datastore) UserFromIDP() user.UserFromIDP {
	ret := _m.Called()

	var r0 user.UserFromIDP
	if rf, ok := ret.Get(0).(func() user.UserFromIDP); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(user.UserFromIDP)
		}
	}

	return r0
}

// UserSession provides a mock function with given fields:
func (_m *Datastore) UserSession() user.Session {
	ret := _m.Called()

	var r0 user.Session
	if rf, ok := ret.Get(0).(func() user.Session); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(user.Session)
		}
	}

	return r0
}
