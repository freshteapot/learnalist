// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// AclWriter is an autogenerated mock type for the AclWriter type
type AclWriter struct {
	mock.Mock
}

// DeleteByExtUUID provides a mock function with given fields: extUUID
func (_m *AclWriter) DeleteByExtUUID(extUUID string) error {
	ret := _m.Called(extUUID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(extUUID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteList provides a mock function with given fields: alistUUID
func (_m *AclWriter) DeleteList(alistUUID string) error {
	ret := _m.Called(alistUUID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(alistUUID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GrantUserListReadAccess provides a mock function with given fields: alistUUID, userUUID
func (_m *AclWriter) GrantUserListReadAccess(alistUUID string, userUUID string) error {
	ret := _m.Called(alistUUID, userUUID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(alistUUID, userUUID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GrantUserListWriteAccess provides a mock function with given fields: alistUUID, userUUID
func (_m *AclWriter) GrantUserListWriteAccess(alistUUID string, userUUID string) error {
	ret := _m.Called(alistUUID, userUUID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(alistUUID, userUUID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MakeListPrivate provides a mock function with given fields: alistUUID, userUUID
func (_m *AclWriter) MakeListPrivate(alistUUID string, userUUID string) error {
	ret := _m.Called(alistUUID, userUUID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(alistUUID, userUUID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RevokeUserListReadAccess provides a mock function with given fields: alistUUID, userUUID
func (_m *AclWriter) RevokeUserListReadAccess(alistUUID string, userUUID string) error {
	ret := _m.Called(alistUUID, userUUID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(alistUUID, userUUID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RevokeUserListWriteAccess provides a mock function with given fields: alistUUID, userUUID
func (_m *AclWriter) RevokeUserListWriteAccess(alistUUID string, userUUID string) error {
	ret := _m.Called(alistUUID, userUUID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(alistUUID, userUUID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ShareListWithFriends provides a mock function with given fields: alistUUID
func (_m *AclWriter) ShareListWithFriends(alistUUID string) error {
	ret := _m.Called(alistUUID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(alistUUID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ShareListWithPublic provides a mock function with given fields: alistUUID
func (_m *AclWriter) ShareListWithPublic(alistUUID string) error {
	ret := _m.Called(alistUUID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(alistUUID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
