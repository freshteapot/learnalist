components:
  examples:
  schemas:
    HttpDripfeedInputBase:
      type: object
      required:
        - alist_uuid
        - user_uuid
      properties:
        alist_uuid:
          type: string
        user_uuid:
          type: string

    HttpDripfeedInputV1:
      type: object
      allOf:
        - $ref: "#/components/schemas/HttpDripfeedInputBase"
    HttpDripfeedInputV2:
      type: object
      required:
        - settings
        - kind
      allOf:
        - type: object
          required:
            - show
          properties:
            settings:
              type: object
              properties:
                show:
                  type: string
        - $ref: "#/components/schemas/HttpDripfeedInputBase"

    AlistFrom:
      type: object
      description: "Give context of where this list was imported / synced from, if it is quizlet, cram, brainscape it is not possible to make this list public"
      required:
        - kind
        - ext_uuid
        - ref_url
      properties:
        kind:
          type: string
          description: Context of where it came from, when coming from quizlet, cram, brainscape, it is not possible to make the list public.
          enum:
            - quizlet
            - cram
            - brainscape
            - learnalist
        ext_uuid:
          type: string
        ref_url:
          type: string

    AlistInput:
      type: object
      required:
        - info
        - data
      properties:
        info:
          $ref: "#/components/schemas/AlistInfo"
        data:
          $ref: "#/components/schemas/AnyType"
          description: Data is based on the type. v1=AlistDataV1, v2=AlistDataV2 etc
          example:
            - $ref: "#/components/schemas/AlistDataV1"
            - $ref: "#/components/schemas/AlistDataV2"

    AlistInteract:
      type: object
      properties:
        slideshow:
          type: integer
        totalrecall:
          type: integer

    AlistInfo:
      type: object
      required:
        - title
        - type
      properties:
        title:
          type: string
        type:
          type: string
        labels:
          type: array
          items:
            type: string
        shared_with:
          type: string
        interact:
          $ref: "#/components/schemas/AlistInteract"
        from:
          $ref: "#/components/schemas/AlistFrom"

    AlistItemV1:
      type: string

    AlistDataV1:
      type: object
      required:
        - data
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/AlistItemV1"

    AlistItemV2:
      type: object
      required:
        - from
        - to
      properties:
        from:
          type: string
        to:
          type: string

    AlistDataV2:
      type: object
      required:
        - data
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/AlistItemV2"

    Alist:
      type: object
      required:
        - uuid
        - kind
      discriminator:
        propertyName: kind
      allOf:
        - type: object
          properties:
            uuid:
              type: string
        - $ref: "#/components/schemas/AlistInput"

paths:
  /alist:
    post:
      tags:
        - aList
      operationId: addList
      description: add a new list
      requestBody:
        description: A list object
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AlistInput"
      responses:
        "201":
          description: List has been created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Alist"
        "400":
          description: Bad request, something is wrong with the list object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HttpResponseMessage"
        "422":
          description: Input had no errors but was not valid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HttpResponseMessage"
        "500":
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HttpResponseMessage"
  /alist/{uuid}:
    get:
      tags:
        - aList
      description: Get a list
      operationId: getListByUuid
      parameters:
        - name: uuid
          in: path
          description: UUID of list
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Return a list, data will depend on the list type
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Alist"
        "404":
          description: List is not in the system
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HttpResponseMessage"
        "403":
          description: User making request does not have access to the list in question
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HttpResponseMessage"
        "500":
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HttpResponseMessage"
    put:
      tags:
        - aList
      description: Update a list
      operationId: updateListByUuid
      parameters:
        - name: uuid
          in: path
          description: UUID of list
          required: true
          schema:
            type: string
      requestBody:
        description: List to update
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Alist"
      responses:
        "200":
          description: Return a list, data will depend on the list type
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Alist"
        "404":
          description: List is not in the system
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HttpResponseMessage"
        "403":
          description: User making request does not have access to the list in question
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HttpResponseMessage"
        "422":
          description: Input had no errors but was not valid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HttpResponseMessage"
        "500":
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HttpResponseMessage"

    delete:
      tags:
        - aList
      description: Delete a list
      operationId: deleteListByUuid
      parameters:
        - name: uuid
          in: path
          description: UUID of list
          required: true
          schema:
            type: string
      responses:
        "200":
          description: list deleted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HttpResponseMessage"
        "404":
          description: List is not in the system
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HttpResponseMessage"

        "403":
          description: UUID does not match that of the logged in user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HttpResponseMessage"
        "500":
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HttpResponseMessage"

  /alist/by/me:
    get:
      tags:
        - aList
      description: Get lists by me
      operationId: getListsByMe
      parameters:
        - in: query
          name: labels
          description: Filter your lists by one or many labels. "separated by ,".
          schema:
            type: string
        - in: query
          name: list_type
          description: Filter your lists by type v1, v2 etc
          schema:
            type: string
      responses:
        "200":
          description: Return an array of lists
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Alist"
