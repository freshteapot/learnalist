// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Acl is an autogenerated mock type for the Acl type
type Acl struct {
	mock.Mock
}

// DeleteAsset provides a mock function with given fields: extUUID
func (_m *Acl) DeleteAsset(extUUID string) error {
	ret := _m.Called(extUUID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(extUUID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteByExtUUID provides a mock function with given fields: extUUID
func (_m *Acl) DeleteByExtUUID(extUUID string) error {
	ret := _m.Called(extUUID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(extUUID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteChallenge provides a mock function with given fields: extUUID
func (_m *Acl) DeleteChallenge(extUUID string) error {
	ret := _m.Called(extUUID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(extUUID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteList provides a mock function with given fields: alistUUID
func (_m *Acl) DeleteList(alistUUID string) error {
	ret := _m.Called(alistUUID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(alistUUID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GrantUserAssetReadAccess provides a mock function with given fields: extUUID, userUUID
func (_m *Acl) GrantUserAssetReadAccess(extUUID string, userUUID string) error {
	ret := _m.Called(extUUID, userUUID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(extUUID, userUUID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GrantUserChallengeWriteAccess provides a mock function with given fields: extUUID, userUUID
func (_m *Acl) GrantUserChallengeWriteAccess(extUUID string, userUUID string) error {
	ret := _m.Called(extUUID, userUUID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(extUUID, userUUID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GrantUserListReadAccess provides a mock function with given fields: alistUUID, userUUID
func (_m *Acl) GrantUserListReadAccess(alistUUID string, userUUID string) error {
	ret := _m.Called(alistUUID, userUUID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(alistUUID, userUUID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GrantUserListWriteAccess provides a mock function with given fields: alistUUID, userUUID
func (_m *Acl) GrantUserListWriteAccess(alistUUID string, userUUID string) error {
	ret := _m.Called(alistUUID, userUUID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(alistUUID, userUUID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GrantUserPublicListWriteAccess provides a mock function with given fields: userUUID
func (_m *Acl) GrantUserPublicListWriteAccess(userUUID string) error {
	ret := _m.Called(userUUID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(userUUID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// HasUserAssetReadAccess provides a mock function with given fields: extUUID, userUUID
func (_m *Acl) HasUserAssetReadAccess(extUUID string, userUUID string) (bool, error) {
	ret := _m.Called(extUUID, userUUID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(extUUID, userUUID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(extUUID, userUUID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HasUserChallengeOwnerAccess provides a mock function with given fields: extUUID, userUUID
func (_m *Acl) HasUserChallengeOwnerAccess(extUUID string, userUUID string) (bool, error) {
	ret := _m.Called(extUUID, userUUID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(extUUID, userUUID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(extUUID, userUUID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HasUserChallengeWriteAccess provides a mock function with given fields: extUUID, userUUID
func (_m *Acl) HasUserChallengeWriteAccess(extUUID string, userUUID string) (bool, error) {
	ret := _m.Called(extUUID, userUUID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(extUUID, userUUID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(extUUID, userUUID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HasUserListReadAccess provides a mock function with given fields: alistUUID, userUUID
func (_m *Acl) HasUserListReadAccess(alistUUID string, userUUID string) (bool, error) {
	ret := _m.Called(alistUUID, userUUID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(alistUUID, userUUID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(alistUUID, userUUID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HasUserListWriteAccess provides a mock function with given fields: alistUUID, userUUID
func (_m *Acl) HasUserListWriteAccess(alistUUID string, userUUID string) (bool, error) {
	ret := _m.Called(alistUUID, userUUID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(alistUUID, userUUID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(alistUUID, userUUID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HasUserPublicListWriteAccess provides a mock function with given fields: userUUID
func (_m *Acl) HasUserPublicListWriteAccess(userUUID string) (bool, error) {
	ret := _m.Called(userUUID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(userUUID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userUUID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsListAvailableToFriends provides a mock function with given fields: alistUUID
func (_m *Acl) IsListAvailableToFriends(alistUUID string) (bool, error) {
	ret := _m.Called(alistUUID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(alistUUID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(alistUUID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsListPrivate provides a mock function with given fields: extUUID
func (_m *Acl) IsListPrivate(extUUID string) (bool, error) {
	ret := _m.Called(extUUID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(extUUID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(extUUID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsListPublic provides a mock function with given fields: extUUID
func (_m *Acl) IsListPublic(extUUID string) (bool, error) {
	ret := _m.Called(extUUID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(extUUID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(extUUID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListIsSharedWith provides a mock function with given fields: alistUUID
func (_m *Acl) ListIsSharedWith(alistUUID string) (string, error) {
	ret := _m.Called(alistUUID)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(alistUUID)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(alistUUID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MakeAssetPrivate provides a mock function with given fields: extUUID, userUUID
func (_m *Acl) MakeAssetPrivate(extUUID string, userUUID string) error {
	ret := _m.Called(extUUID, userUUID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(extUUID, userUUID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MakeChallengePrivate provides a mock function with given fields: extUUID, userUUID
func (_m *Acl) MakeChallengePrivate(extUUID string, userUUID string) error {
	ret := _m.Called(extUUID, userUUID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(extUUID, userUUID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MakeListPrivate provides a mock function with given fields: alistUUID, userUUID
func (_m *Acl) MakeListPrivate(alistUUID string, userUUID string) error {
	ret := _m.Called(alistUUID, userUUID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(alistUUID, userUUID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RevokeUserAssetReadAccess provides a mock function with given fields: extUUID, userUUID
func (_m *Acl) RevokeUserAssetReadAccess(extUUID string, userUUID string) error {
	ret := _m.Called(extUUID, userUUID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(extUUID, userUUID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RevokeUserChallengeWriteAccess provides a mock function with given fields: extUUID, userUUID
func (_m *Acl) RevokeUserChallengeWriteAccess(extUUID string, userUUID string) error {
	ret := _m.Called(extUUID, userUUID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(extUUID, userUUID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RevokeUserListReadAccess provides a mock function with given fields: alistUUID, userUUID
func (_m *Acl) RevokeUserListReadAccess(alistUUID string, userUUID string) error {
	ret := _m.Called(alistUUID, userUUID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(alistUUID, userUUID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RevokeUserListWriteAccess provides a mock function with given fields: alistUUID, userUUID
func (_m *Acl) RevokeUserListWriteAccess(alistUUID string, userUUID string) error {
	ret := _m.Called(alistUUID, userUUID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(alistUUID, userUUID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RevokeUserPublicListWriteAccess provides a mock function with given fields: userUUID
func (_m *Acl) RevokeUserPublicListWriteAccess(userUUID string) error {
	ret := _m.Called(userUUID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(userUUID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ShareAssetWithPublic provides a mock function with given fields: extUUID
func (_m *Acl) ShareAssetWithPublic(extUUID string) error {
	ret := _m.Called(extUUID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(extUUID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ShareChallengeWithPublic provides a mock function with given fields: extUUID
func (_m *Acl) ShareChallengeWithPublic(extUUID string) error {
	ret := _m.Called(extUUID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(extUUID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ShareListWithFriends provides a mock function with given fields: alistUUID
func (_m *Acl) ShareListWithFriends(alistUUID string) error {
	ret := _m.Called(alistUUID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(alistUUID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ShareListWithPublic provides a mock function with given fields: alistUUID
func (_m *Acl) ShareListWithPublic(alistUUID string) error {
	ret := _m.Called(alistUUID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(alistUUID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
