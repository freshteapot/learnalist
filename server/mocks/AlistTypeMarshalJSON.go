// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	alist "github.com/freshteapot/learnalist-api/server/api/alist"
	mock "github.com/stretchr/testify/mock"
)

// AlistTypeMarshalJSON is an autogenerated mock type for the AlistTypeMarshalJSON type
type AlistTypeMarshalJSON struct {
	mock.Mock
}

// Enrich provides a mock function with given fields: _a0
func (_m *AlistTypeMarshalJSON) Enrich(_a0 alist.Alist) alist.Alist {
	ret := _m.Called(_a0)

	var r0 alist.Alist
	if rf, ok := ret.Get(0).(func(alist.Alist) alist.Alist); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(alist.Alist)
	}

	return r0
}

// ParseData provides a mock function with given fields: _a0
func (_m *AlistTypeMarshalJSON) ParseData(_a0 []byte) (interface{}, error) {
	ret := _m.Called(_a0)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func([]byte) interface{}); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ParseInfo provides a mock function with given fields: info
func (_m *AlistTypeMarshalJSON) ParseInfo(info alist.AlistInfo) (alist.AlistInfo, error) {
	ret := _m.Called(info)

	var r0 alist.AlistInfo
	if rf, ok := ret.Get(0).(func(alist.AlistInfo) alist.AlistInfo); ok {
		r0 = rf(info)
	} else {
		r0 = ret.Get(0).(alist.AlistInfo)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(alist.AlistInfo) error); ok {
		r1 = rf(info)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Validate provides a mock function with given fields: _a0
func (_m *AlistTypeMarshalJSON) Validate(_a0 alist.Alist) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(alist.Alist) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
