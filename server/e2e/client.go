package e2e

import (
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
	"strings"
)

// Generated by curl-to-Go: https://mholt.github.io/curl-to-go

type RegisterResponse struct {
	Username  string `json:"username"`
	Uuid      string `json:"uuid"`
	BasicAuth string
}

type AlistUuidResponse struct {
	Uuid string `json:"uuid"`
}

type MessageResponse struct {
	Message string `json:"message"`
}

type HttpResponse struct {
	StatusCode int
	Body       []byte
}

type Client struct {
	server string
}

func NewClient(_server string) Client {
	return Client{
		server: _server,
	}
}

func (c Client) getServerURL() string {
	return c.server
}

func getBasicAuth(username string, password string) string {
	auth := username + ":" + password
	return base64.StdEncoding.EncodeToString([]byte(auth))
}

func (c Client) Register(username string, password string) RegisterResponse {
	body := strings.NewReader(fmt.Sprintf(`
{
    "username":"%s",
    "password":"%s"
}
`, username, password))

	url := fmt.Sprintf("%s/api/v1/register", c.getServerURL())
	req, err := http.NewRequest("POST", url, body)
	if err != nil {
		// handle err
	}
	req.Header.Set("Content-Type", "application/json")

	resp, err := http.DefaultClient.Do(req)
	if err != nil {
		// handle err
	}
	defer resp.Body.Close()
	data, err := ioutil.ReadAll(resp.Body)
	var response RegisterResponse
	err = json.Unmarshal(data, &response)
	response.BasicAuth = getBasicAuth(username, password)
	return response
}

func (c Client) PostListV1(userInfo RegisterResponse, input string) AlistUuidResponse {
	body := strings.NewReader(input)
	url := fmt.Sprintf("%s/api/v1/alist", c.getServerURL())
	req, err := http.NewRequest("POST", url, body)
	if err != nil {
		// handle err
	}
	req.Header.Set("Authorization", "Basic "+userInfo.BasicAuth)
	req.Header.Set("Content-Type", "application/json")

	resp, err := http.DefaultClient.Do(req)
	if err != nil {
		// handle err
	}
	defer resp.Body.Close()
	var response AlistUuidResponse

	data, err := ioutil.ReadAll(resp.Body)
	err = json.Unmarshal(data, &response)
	return response
}

func (c Client) SetListShare(userInfo RegisterResponse, alistUUID string, action string) MessageResponse {
	body := strings.NewReader(fmt.Sprintf(`{
  "alist_uuid": "%s",
  "action": "%s"
}`, alistUUID, action))
	url := fmt.Sprintf("%s/api/v1/share/readaccess", c.getServerURL())

	req, err := http.NewRequest("PUT", url, body)
	if err != nil {
		// handle err
	}
	req.Header.Set("Authorization", "Basic "+userInfo.BasicAuth)
	req.Header.Set("Content-Type", "application/json")

	resp, err := http.DefaultClient.Do(req)
	if err != nil {
		// handle err
	}
	defer resp.Body.Close()
	var response MessageResponse
	data, err := ioutil.ReadAll(resp.Body)
	err = json.Unmarshal(data, &response)
	return response
}

func (c Client) GetListByUuID(userInfo RegisterResponse, uuid string) HttpResponse {
	url := fmt.Sprintf("%s/api/v1/alist/%s", c.getServerURL(), uuid)
	req, err := http.NewRequest("GET", url, nil)
	if err != nil {
		// handle err
	}
	req.Header.Set("Authorization", "Basic "+userInfo.BasicAuth)

	resp, err := http.DefaultClient.Do(req)
	if err != nil {
		// handle err
	}

	defer resp.Body.Close()

	var response HttpResponse
	response.StatusCode = resp.StatusCode
	data, err := ioutil.ReadAll(resp.Body)
	err = json.Unmarshal(data, &response.Body)
	return response
}
