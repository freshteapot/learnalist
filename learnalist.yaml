openapi: "3.0.2"
info:
  title: Learnalist API
  version: "1.0"
servers:
  - url: https://learnalist.net/api/v1
  - url: http://localhost:1234/api/v1

components:
  schemas:
    AnyType:
      anyOf:
        - type: string
        - type: number
        - type: integer
        - type: boolean
        - type: array
          items: {}
        - type: object
    AlistInput:
      type: object
      required:
        - info
        - data
      properties:
        info:
          $ref: "#/components/schemas/AlistInfo"
        data:
          $ref: "#/components/schemas/AnyType"
          description: Data is based on the type. v1=AlistDataV1, v2=AlistDataV2 etc
          example:
            - $ref: "#/components/schemas/AlistDataV1"
            - $ref: "#/components/schemas/AlistDataV2"

    AlistInfo:
      type: object
      required:
        - title
        - type
      properties:
        title:
          type: string
        type:
          type: string
        labels:
          type: array
          items:
            type: string
        shared_with:
          type: string

    AlistItemV1:
      type: string

    AlistDataV1:
      type: object
      required:
        - data
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/AlistItemV1"

    AlistItemV2:
      type: object
      required:
        - from
        - to
      properties:
        from:
          type: string
        to:
          type: string

    AlistDataV2:
      type: object
      required:
        - data
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/AlistItemV2"

    Alist:
      type: object
      required:
        - uuid
      allOf:
        - type: object
          properties:
            uuid:
              type: string
        - $ref: "#/components/schemas/AlistInput"

    HttpUserRegisterInput:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
    HttpUserRegisterResponse:
      type: object
      properties:
        username:
          type: string
        uuid:
          type: string

    HttpUserLoginRequest:
      allOf:
        - $ref: "#/components/schemas/HttpUserRegisterInput"

    HttpUserLoginResponse:
      type: object
      required:
        - token
        - user_uuid
      properties:
        token:
          type: string
        user_uuid:
          type: string

    HttpResponseMessage:
      type: object
      properties:
        message:
          type: string
    Kind:
      type: object
      properties:
        kind:
          type: string
    Version:
      type: object
      properties:
        gitHash:
          type: string
        gitDate:
          type: string
          format: date-time
        version:
          type: string
        url:
          type: string

    SpacedRepetitionEntryViewed:
      type: object
      required:
        - uuid
        - action
      properties:
        uuid:
          type: string
        action:
          type: string

    SpacedRepetitionNew:
      discriminator:
        propertyName: kind
        anyOf:
          - $ref: "#/components/schemas/SpacedRepetitionV1New"
          - $ref: "#/components/schemas/SpacedRepetitionV2New"

    SpacedRepetition:
      discriminator:
        propertyName: kind
        anyOf:
          - $ref: "#/components/schemas/SpacedRepetitionV1"
          - $ref: "#/components/schemas/SpacedRepetitionV2"

    SpacedRepetitionBaseNew:
      type: object
      required:
        - show
        - kind
      properties:
        show:
          type: string
        kind:
          type: string

    SpacedRepetitionBase:
      required:
        - uuid
      allOf:
        - $ref: "#/components/schemas/SpacedRepetitionBaseNew"
        - type: object
          properties:
            uuid:
              type: string

    SpacedRepetitionBaseSettings:
      type: object
      required:
        - level
        - when_next
      properties:
        level:
          type: string
        when_next:
          type: string
          format: date-time

    SpacedRepetitionBaseSettingsShow:
      type: object
      required:
        - show
      properties:
        show:
          type: string

    SpacedRepetitionV1:
      allOf:
        - $ref: "#/components/schemas/SpacedRepetitionV1New"
        - $ref: "#/components/schemas/SpacedRepetitionBase"

    SpacedRepetitionV1New:
      required:
        - data
        - settings
      allOf:
        - $ref: "#/components/schemas/SpacedRepetitionBaseNew"
        - type: object
          properties:
            data:
              $ref: "#/components/schemas/SpacedRepetitionDataV1"
            settings:
              $ref: "#/components/schemas/SpacedRepetitionSettingsV1"

    SpacedRepetitionDataV1:
      type: string

    SpacedRepetitionSettingsV1:
      $ref: "#/components/schemas/SpacedRepetitionBaseSettings"

    SpacedRepetitionV2:
      allOf:
        - $ref: "#/components/schemas/SpacedRepetitionV2New"
        - $ref: "#/components/schemas/SpacedRepetitionBase"

    SpacedRepetitionV2New:
      required:
        - data
        - settings
      allOf:
        - $ref: "#/components/schemas/SpacedRepetitionBaseNew"
        - type: object
          properties:
            data:
              $ref: "#/components/schemas/SpacedRepetitionDataV2"
            settings:
              $ref: "#/components/schemas/SpacedRepetitionSettingsV2"

    SpacedRepetitionDataV2:
      type: object
      required:
        - from
        - to
      properties:
        from:
          type: string
        to:
          type: string

    SpacedRepetitionSettingsV2:
      allOf:
        - $ref: "#/components/schemas/SpacedRepetitionBaseSettingsShow"
        - $ref: "#/components/schemas/SpacedRepetitionBaseSettings"

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
    basicAuth:
      type: http
      scheme: basic

paths:
  /version:
    get:
      operationId: getServerVersion
      description: Get information about the server, linked to the git repo
      security:
        - {}
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Version"

  /user/register:
    post:
      operationId: registerUserWithUsernameAndPassword
      description: Register a new user with username and password
      requestBody:
        description: Username and password
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/HttpUserRegisterInput"
      responses:
        "200":
          description: User already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HttpUserRegisterResponse"
        "201":
          description: User registered
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HttpUserRegisterResponse"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HttpResponseMessage"
        "500":
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HttpResponseMessage"

  /user/login:
    post:
      operationId: loginWithUsernameAndPassword
      description: Login with username and password. The token can be used in future api requests via bearerAuth
      requestBody:
        description: Username and password
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/HttpUserLoginRequest"
      responses:
        "200":
          description: You now have a login session already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HttpUserLoginResponse"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HttpResponseMessage"
        "403":
          description: Username and password did not match what was in the system
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HttpResponseMessage"
        "500":
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HttpResponseMessage"

  /user/{uuid}:
    delete:
      description: Deletes a user and there lists
      operationId: deleteUser
      parameters:
        - name: uuid
          in: path
          description: UUID of entry
          required: true
          schema:
            type: string
      responses:
        "200":
          description: user deleted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HttpResponseMessage"
        "403":
          description: UUID does not match that of the logged in user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HttpResponseMessage"
        "500":
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HttpResponseMessage"

  /alist:
    post:
      operationId: addList
      description: add a new list
      requestBody:
        description: A list object
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AlistInput"
      responses:
        "201":
          description: List has been created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Alist"
        "400":
          description: Bad request, something is wrong with the list object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HttpResponseMessage"
        "500":
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HttpResponseMessage"
  /alist/{uuid}:
    get:
      description: Get a list
      operationId: getListByUuid
      parameters:
        - name: uuid
          in: path
          description: UUID of list
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Return a list, data will depend on the list type
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Alist"
        "404":
          description: List is not in the system
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HttpResponseMessage"

        "403":
          description: User making request does not have access to the list in question
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HttpResponseMessage"
        "500":
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HttpResponseMessage"

    delete:
      description: Delete a list
      operationId: deleteListByUuid
      parameters:
        - name: uuid
          in: path
          description: UUID of list
          required: true
          schema:
            type: string
      responses:
        "200":
          description: list deleted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HttpResponseMessage"
        "404":
          description: List is not in the system
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HttpResponseMessage"

        "403":
          description: UUID does not match that of the logged in user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HttpResponseMessage"
        "500":
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HttpResponseMessage"

  /alist/by/me:
    get:
      description: Get lists by me
      operationId: getListsByMe
      parameters:
        - in: query
          name: labels
          description: Filter your lists by one or many labels. "seperated by ,".
          schema:
            type: string
        - in: query
          name: list_type
          description: Filter your lists by type v1, v2 etc
          schema:
            type: string
      responses:
        "200":
          description: Return an array of lists
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Alist"

  /spaced-repetition/:
    post:
      operationId: addSpacedRepetitionEntry
      description: Add entry for spaced based learning
      requestBody:
        description: Entry to add for spaced based learning
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SpacedRepetitionNew"
      responses:
        "200":
          description: Entry already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SpacedRepetition"
        "201":
          description: Entry added
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SpacedRepetition"
        "400":
          description: Bad request, requires correct kind
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HttpResponseMessage"
        "500":
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HttpResponseMessage"
  /spaced-repetition/{uuid}:
    delete:
      description: Deletes a single entry based on the UUID
      operationId: deleteSpacedRepetitionEntry
      parameters:
        - name: uuid
          in: path
          description: UUID of entry
          required: true
          schema:
            type: string
      responses:
        "204":
          description: entry deleted
        "400":
          description: Bad request, missing uuid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HttpResponseMessage"
        "500":
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HttpResponseMessage"

  /spaced-repetition/all:
    get:
      description: Get all entries for spaced repetition learning
      operationId: getSpacedRepetitionEntries
      responses:
        "200":
          description: Return list of all entries
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SpacedRepetition"
        "500":
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HttpResponseMessage"
  /spaced-repetition/next:
    get:
      description: Get next entry for spaced based learning
      operationId: getNextSpacedRepetitionEntry
      responses:
        "200":
          description: Return entry
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SpacedRepetition"
        "204":
          description: User has entries, but time has not passed to show any
        "404":
          description: User has no entries.
        "500":
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HttpResponseMessage"

  /spaced-repetition/viewed:
    post:
      operationId: updateSpacedRepetitionEntry
      description: Update spaced entry with feedback from the user
      requestBody:
        description: Tell the system if we should move forward or backwards with the learning
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SpacedRepetitionEntryViewed"
      responses:
        "200":
          description: Entry updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SpacedRepetition"
        "404":
          description: Entry not found, no body
        "500":
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HttpResponseMessage"
security:
  - bearerAuth: []
  - basicAuth: []
