// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	challenge "github.com/freshteapot/learnalist-api/server/pkg/challenge"
	mock "github.com/stretchr/testify/mock"
)

// ChallengeNotificationRepository is an autogenerated mock type for the ChallengeNotificationRepository type
type ChallengeNotificationRepository struct {
	mock.Mock
}

// GetChallengeName provides a mock function with given fields: uuid
func (_m *ChallengeNotificationRepository) GetChallengeName(uuid string) string {
	ret := _m.Called(uuid)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(uuid)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetUserDisplayName provides a mock function with given fields: uuid
func (_m *ChallengeNotificationRepository) GetUserDisplayName(uuid string) string {
	ret := _m.Called(uuid)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(uuid)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetUsersInfo provides a mock function with given fields: challengeUUID
func (_m *ChallengeNotificationRepository) GetUsersInfo(challengeUUID string) ([]challenge.ChallengeNotificationUserInfo, error) {
	ret := _m.Called(challengeUUID)

	var r0 []challenge.ChallengeNotificationUserInfo
	if rf, ok := ret.Get(0).(func(string) []challenge.ChallengeNotificationUserInfo); ok {
		r0 = rf(challengeUUID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]challenge.ChallengeNotificationUserInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(challengeUUID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
