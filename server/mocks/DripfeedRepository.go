// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	dripfeed "github.com/freshteapot/learnalist-api/server/pkg/spaced_repetition/dripfeed"
	mock "github.com/stretchr/testify/mock"

	openapi "github.com/freshteapot/learnalist-api/server/pkg/openapi"
)

// DripfeedRepository is an autogenerated mock type for the DripfeedRepository type
type DripfeedRepository struct {
	mock.Mock
}

// AddAll provides a mock function with given fields: dripfeedUUID, userUUID, alistUUID, items
func (_m *DripfeedRepository) AddAll(dripfeedUUID string, userUUID string, alistUUID string, items []string) error {
	ret := _m.Called(dripfeedUUID, userUUID, alistUUID, items)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, []string) error); ok {
		r0 = rf(dripfeedUUID, userUUID, alistUUID, items)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteAllByUserUUIDAndSpacedRepetitionUUID provides a mock function with given fields: userUUID, srsUUID
func (_m *DripfeedRepository) DeleteAllByUserUUIDAndSpacedRepetitionUUID(userUUID string, srsUUID string) error {
	ret := _m.Called(userUUID, srsUUID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(userUUID, srsUUID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteByUUIDAndUserUUID provides a mock function with given fields: dripfeedUUID, userUUID
func (_m *DripfeedRepository) DeleteByUUIDAndUserUUID(dripfeedUUID string, userUUID string) error {
	ret := _m.Called(dripfeedUUID, userUUID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(dripfeedUUID, userUUID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteByUser provides a mock function with given fields: userUUID
func (_m *DripfeedRepository) DeleteByUser(userUUID string) error {
	ret := _m.Called(userUUID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(userUUID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Exists provides a mock function with given fields: dripfeedUUID
func (_m *DripfeedRepository) Exists(dripfeedUUID string) (bool, error) {
	ret := _m.Called(dripfeedUUID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(dripfeedUUID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(dripfeedUUID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInfo provides a mock function with given fields: dripfeedUUID
func (_m *DripfeedRepository) GetInfo(dripfeedUUID string) (openapi.SpacedRepetitionOvertimeInfo, error) {
	ret := _m.Called(dripfeedUUID)

	var r0 openapi.SpacedRepetitionOvertimeInfo
	if rf, ok := ret.Get(0).(func(string) openapi.SpacedRepetitionOvertimeInfo); ok {
		r0 = rf(dripfeedUUID)
	} else {
		r0 = ret.Get(0).(openapi.SpacedRepetitionOvertimeInfo)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(dripfeedUUID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNext provides a mock function with given fields: dripfeedUUID
func (_m *DripfeedRepository) GetNext(dripfeedUUID string) (dripfeed.RepoItem, error) {
	ret := _m.Called(dripfeedUUID)

	var r0 dripfeed.RepoItem
	if rf, ok := ret.Get(0).(func(string) dripfeed.RepoItem); ok {
		r0 = rf(dripfeedUUID)
	} else {
		r0 = ret.Get(0).(dripfeed.RepoItem)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(dripfeedUUID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
