// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// AclReaderChallenge is an autogenerated mock type for the AclReaderChallenge type
type AclReaderChallenge struct {
	mock.Mock
}

// HasUserChallengeOwnerAccess provides a mock function with given fields: extUUID, userUUID
func (_m *AclReaderChallenge) HasUserChallengeOwnerAccess(extUUID string, userUUID string) (bool, error) {
	ret := _m.Called(extUUID, userUUID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(extUUID, userUUID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(extUUID, userUUID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HasUserChallengeWriteAccess provides a mock function with given fields: extUUID, userUUID
func (_m *AclReaderChallenge) HasUserChallengeWriteAccess(extUUID string, userUUID string) (bool, error) {
	ret := _m.Called(extUUID, userUUID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(extUUID, userUUID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(extUUID, userUUID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
