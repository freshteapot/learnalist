// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	openapi "github.com/freshteapot/learnalist-api/server/pkg/openapi"
	plank "github.com/freshteapot/learnalist-api/server/pkg/plank"
	mock "github.com/stretchr/testify/mock"
)

// PlankRepository is an autogenerated mock type for the PlankRepository type
type PlankRepository struct {
	mock.Mock
}

// DeleteEntriesByUser provides a mock function with given fields: userUUID
func (_m *PlankRepository) DeleteEntriesByUser(userUUID string) error {
	ret := _m.Called(userUUID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(userUUID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteEntry provides a mock function with given fields: UUID, userUUID
func (_m *PlankRepository) DeleteEntry(UUID string, userUUID string) error {
	ret := _m.Called(UUID, userUUID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(UUID, userUUID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetEntry provides a mock function with given fields: UUID, userUUID
func (_m *PlankRepository) GetEntry(UUID string, userUUID string) (openapi.Plank, error) {
	ret := _m.Called(UUID, userUUID)

	var r0 openapi.Plank
	if rf, ok := ret.Get(0).(func(string, string) openapi.Plank); ok {
		r0 = rf(UUID, userUUID)
	} else {
		r0 = ret.Get(0).(openapi.Plank)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(UUID, userUUID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// History provides a mock function with given fields: userUUID
func (_m *PlankRepository) History(userUUID string) ([]openapi.Plank, error) {
	ret := _m.Called(userUUID)

	var r0 []openapi.Plank
	if rf, ok := ret.Get(0).(func(string) []openapi.Plank); ok {
		r0 = rf(userUUID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]openapi.Plank)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userUUID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveEntry provides a mock function with given fields: entry
func (_m *PlankRepository) SaveEntry(entry plank.Entry) error {
	ret := _m.Called(entry)

	var r0 error
	if rf, ok := ret.Get(0).(func(plank.Entry) error); ok {
		r0 = rf(entry)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
