// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	openapi "github.com/freshteapot/learnalist-api/server/pkg/openapi"
	mock "github.com/stretchr/testify/mock"
)

// MobileRepository is an autogenerated mock type for the MobileRepository type
type MobileRepository struct {
	mock.Mock
}

// DeleteByApp provides a mock function with given fields: userUUID, appIdentifier
func (_m *MobileRepository) DeleteByApp(userUUID string, appIdentifier string) error {
	ret := _m.Called(userUUID, appIdentifier)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(userUUID, appIdentifier)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteByUser provides a mock function with given fields: userUUID
func (_m *MobileRepository) DeleteByUser(userUUID string) error {
	ret := _m.Called(userUUID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(userUUID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetDevicesInfoByToken provides a mock function with given fields: token
func (_m *MobileRepository) GetDevicesInfoByToken(token string) ([]openapi.MobileDeviceInfo, error) {
	ret := _m.Called(token)

	var r0 []openapi.MobileDeviceInfo
	if rf, ok := ret.Get(0).(func(string) []openapi.MobileDeviceInfo); ok {
		r0 = rf(token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]openapi.MobileDeviceInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveDeviceInfo provides a mock function with given fields: deviceInfo
func (_m *MobileRepository) SaveDeviceInfo(deviceInfo openapi.MobileDeviceInfo) (int, error) {
	ret := _m.Called(deviceInfo)

	var r0 int
	if rf, ok := ret.Get(0).(func(openapi.MobileDeviceInfo) int); ok {
		r0 = rf(deviceInfo)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(openapi.MobileDeviceInfo) error); ok {
		r1 = rf(deviceInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
