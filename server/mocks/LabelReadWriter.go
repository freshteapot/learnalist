// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	label "github.com/freshteapot/learnalist-api/server/api/label"
	mock "github.com/stretchr/testify/mock"
)

// LabelReadWriter is an autogenerated mock type for the LabelReadWriter type
type LabelReadWriter struct {
	mock.Mock
}

// GetUniqueListsByUserAndLabel provides a mock function with given fields: _a0, user
func (_m *LabelReadWriter) GetUniqueListsByUserAndLabel(_a0 string, user string) ([]string, error) {
	ret := _m.Called(_a0, user)

	var r0 []string
	if rf, ok := ret.Get(0).(func(string, string) []string); ok {
		r0 = rf(_a0, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(_a0, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserLabels provides a mock function with given fields: uuid
func (_m *LabelReadWriter) GetUserLabels(uuid string) ([]string, error) {
	ret := _m.Called(uuid)

	var r0 []string
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(uuid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(uuid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostAlistLabel provides a mock function with given fields: _a0
func (_m *LabelReadWriter) PostAlistLabel(_a0 label.AlistLabel) (int, error) {
	ret := _m.Called(_a0)

	var r0 int
	if rf, ok := ret.Get(0).(func(label.AlistLabel) int); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(label.AlistLabel) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostUserLabel provides a mock function with given fields: _a0
func (_m *LabelReadWriter) PostUserLabel(_a0 label.UserLabel) (int, error) {
	ret := _m.Called(_a0)

	var r0 int
	if rf, ok := ret.Get(0).(func(label.UserLabel) int); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(label.UserLabel) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveLabelsForAlist provides a mock function with given fields: uuid
func (_m *LabelReadWriter) RemoveLabelsForAlist(uuid string) error {
	ret := _m.Called(uuid)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(uuid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveUserLabel provides a mock function with given fields: _a0, uuid
func (_m *LabelReadWriter) RemoveUserLabel(_a0 string, uuid string) error {
	ret := _m.Called(_a0, uuid)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(_a0, uuid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
