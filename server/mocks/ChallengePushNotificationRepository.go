// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	challenge "github.com/freshteapot/learnalist-api/server/pkg/challenge"
	mock "github.com/stretchr/testify/mock"
)

// ChallengePushNotificationRepository is an autogenerated mock type for the ChallengePushNotificationRepository type
type ChallengePushNotificationRepository struct {
	mock.Mock
}

// GetUserDisplayName provides a mock function with given fields: uuid
func (_m *ChallengePushNotificationRepository) GetUserDisplayName(uuid string) string {
	ret := _m.Called(uuid)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(uuid)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetUsersInfo provides a mock function with given fields: challengeUUID, mobileApps
func (_m *ChallengePushNotificationRepository) GetUsersInfo(challengeUUID string, mobileApps []string) ([]challenge.ChallengeNotificationUserInfo, error) {
	ret := _m.Called(challengeUUID, mobileApps)

	var r0 []challenge.ChallengeNotificationUserInfo
	if rf, ok := ret.Get(0).(func(string, []string) []challenge.ChallengeNotificationUserInfo); ok {
		r0 = rf(challengeUUID, mobileApps)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]challenge.ChallengeNotificationUserInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, []string) error); ok {
		r1 = rf(challengeUUID, mobileApps)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
