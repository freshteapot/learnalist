// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"
import models "github.com/freshteapot/learnalist-api/server/api/models"

// DatastoreLabels is an autogenerated mock type for the DatastoreLabels type
type DatastoreLabels struct {
	mock.Mock
}

// PostAlistLabel provides a mock function with given fields: label
func (_m *DatastoreLabels) PostAlistLabel(label *models.AlistLabel) (int, error) {
	ret := _m.Called(label)

	var r0 int
	if rf, ok := ret.Get(0).(func(*models.AlistLabel) int); ok {
		r0 = rf(label)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*models.AlistLabel) error); ok {
		r1 = rf(label)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostUserLabel provides a mock function with given fields: label
func (_m *DatastoreLabels) PostUserLabel(label *models.UserLabel) (int, error) {
	ret := _m.Called(label)

	var r0 int
	if rf, ok := ret.Get(0).(func(*models.UserLabel) int); ok {
		r0 = rf(label)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*models.UserLabel) error); ok {
		r1 = rf(label)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveUserLabel provides a mock function with given fields: label, uuid
func (_m *DatastoreLabels) RemoveUserLabel(label string, uuid string) error {
	ret := _m.Called(label, uuid)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(label, uuid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
