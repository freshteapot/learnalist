// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	alist "github.com/freshteapot/learnalist-api/server/api/alist"
	mock "github.com/stretchr/testify/mock"
)

// DatastoreAlists is an autogenerated mock type for the DatastoreAlists type
type DatastoreAlists struct {
	mock.Mock
}

// GetAlist provides a mock function with given fields: uuid
func (_m *DatastoreAlists) GetAlist(uuid string) (alist.Alist, error) {
	ret := _m.Called(uuid)

	var r0 alist.Alist
	if rf, ok := ret.Get(0).(func(string) alist.Alist); ok {
		r0 = rf(uuid)
	} else {
		r0 = ret.Get(0).(alist.Alist)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(uuid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllListsByUser provides a mock function with given fields: userUUID
func (_m *DatastoreAlists) GetAllListsByUser(userUUID string) []alist.ShortInfo {
	ret := _m.Called(userUUID)

	var r0 []alist.ShortInfo
	if rf, ok := ret.Get(0).(func(string) []alist.ShortInfo); ok {
		r0 = rf(userUUID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]alist.ShortInfo)
		}
	}

	return r0
}

// GetListsByUserWithFilters provides a mock function with given fields: uuid, labels, listType
func (_m *DatastoreAlists) GetListsByUserWithFilters(uuid string, labels string, listType string) []alist.Alist {
	ret := _m.Called(uuid, labels, listType)

	var r0 []alist.Alist
	if rf, ok := ret.Get(0).(func(string, string, string) []alist.Alist); ok {
		r0 = rf(uuid, labels, listType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]alist.Alist)
		}
	}

	return r0
}

// GetPublicLists provides a mock function with given fields:
func (_m *DatastoreAlists) GetPublicLists() []alist.ShortInfo {
	ret := _m.Called()

	var r0 []alist.ShortInfo
	if rf, ok := ret.Get(0).(func() []alist.ShortInfo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]alist.ShortInfo)
		}
	}

	return r0
}

// RemoveAlist provides a mock function with given fields: alistUUID, userUUID
func (_m *DatastoreAlists) RemoveAlist(alistUUID string, userUUID string) error {
	ret := _m.Called(alistUUID, userUUID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(alistUUID, userUUID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveAlist provides a mock function with given fields: method, aList
func (_m *DatastoreAlists) SaveAlist(method string, aList alist.Alist) (alist.Alist, error) {
	ret := _m.Called(method, aList)

	var r0 alist.Alist
	if rf, ok := ret.Get(0).(func(string, alist.Alist) alist.Alist); ok {
		r0 = rf(method, aList)
	} else {
		r0 = ret.Get(0).(alist.Alist)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, alist.Alist) error); ok {
		r1 = rf(method, aList)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
