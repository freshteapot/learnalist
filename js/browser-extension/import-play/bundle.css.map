{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../info.svelte",
    "../../start.svelte",
    "../../v2.svelte",
    "../../add_v2.svelte",
    "../../spaced_repetition_modal.svelte",
    "../../recall.svelte",
    "../../v2.svelte",
    "../../view.svelte",
    "../../login_modal.svelte"
  ],
  "sourcesContent": [
    "<script>\n  // TODO do I care how often they hit save?\n  // Could store a list with the relationships\n  // {\"kind\", \"cram\", \"ext_uuid\": \"setID\", \"uuid\": \"\"}\n\n  import { push } from \"svelte-spa-router\";\n  import LoginModal from \"../../components/login_modal.svelte\";\n  import { loggedIn, notify } from \"../../shared.js\";\n  import store from \"./store.js\";\n\n  let aList = $store;\n  let listUrl;\n  let show = \"overview\";\n  let saved = false;\n\n  async function handleSave(event) {\n    if (saved) {\n      return;\n    }\n\n    try {\n      await store.save(aList);\n      aList = $store;\n      listUrl = `${store.getServer()}/alist/${aList.uuid}.html`;\n      show = \"saved\";\n      saved = true;\n    } catch (e) {\n      console.log(\"e\", e);\n      alert(\"Fail\");\n    }\n  }\n</script>\n\n<style>\n  h1 {\n    color: #ff3e00;\n    text-transform: uppercase;\n    font-size: 4em;\n    font-weight: 50;\n  }\n</style>\n\n<button class=\"br3\" on:click={() => push('/play/total_recall')}>\n  Total Recall\n</button>\n<button class=\"br3\" on:click={() => push('/play/slideshow')}>Slideshow</button>\n\n<button class=\"br3\" on:click={() => push('/settings')}>Settings</button>\n{#if loggedIn()}\n  <!--\n    - Doesnt work because it needs something below in list-info, I wonder how to solve this\n    - maybe build the router manually? as the code underneath should work\n  -->\n  <button class=\"br3\" on:click={() => push('/interact/spaced_repetition/add')}>\n    ðŸ§  + ðŸ’ª\n  </button>\n  <button class=\"br3\" on:click={handleSave}>Save to Learnalist</button>\n{/if}\n\n{#if show == 'overview'}\n  <h1 id=\"list-title\">{aList.info.title}</h1>\n  <div id=\"list-data\">\n    <table class=\"w-100\" cellspacing=\"0\">\n      <thead>\n        <tr>\n          <th class=\"fw6 bb b--black-20 pb3 tl\">From</th>\n          <th class=\"fw6 bb b--black-20 pb3 tl\">To</th>\n        </tr>\n      </thead>\n      <tbody class=\"lh-copy\">\n        {#each aList.data as item, index}\n          <tr data-index={index}>\n            <td class=\"pv3 pr3 bb b--black-20\">{item.from}</td>\n            <td class=\"pv3 pr3 bb b--black-20\">{item.to}</td>\n          </tr>\n        {/each}\n      </tbody>\n    </table>\n  </div>\n{/if}\n\n{#if show == 'saved'}\n  {#if !loggedIn()}\n    <p>\n      <a target=\"_blank\" href={`${store.getServer()}/login.html`}>\n        Log into learnalist.net\n      </a>\n    </p>\n  {:else}\n    <p>List has been saved</p>\n    <p>\n      <a target=\"_blank\" href={listUrl}>Open in the browser</a>\n    </p>\n  {/if}\n{/if}\n",
    "<script>\n  import { push } from \"svelte-spa-router\";\n  import Info from \"./info.svelte\";\n  import store from \"./store.js\";\n  import { onMount } from \"svelte\";\n  // Add new\n  // Add if block\n  // Add to url.inclues\n\n  let aList;\n  let show = \"\";\n\n  onMount(async () => {\n    handle();\n  });\n\n  function brainscapeToAlist(input) {\n    const data = input.detail;\n    return {\n      info: {\n        title: data.title,\n        type: \"v2\"\n      },\n      data: data.listData\n    };\n  }\n\n  function cramToAlist(input) {\n    // setID = UUID\n    const data = input.detail;\n    const listData = data.listData.map(term => {\n      return { from: term.front_plain, to: term.back_plain };\n    });\n\n    return {\n      info: {\n        title: data.title,\n        type: \"v2\"\n      },\n      data: listData\n    };\n  }\n\n  function quizletToAlist(input) {\n    const data = input.detail;\n    const listData = Object.values(\n      data.listData.setPageData.termIdToTermsMap\n    ).map(term => {\n      return { from: term.word, to: term.definition };\n    });\n\n    return {\n      info: {\n        title: data.title,\n        type: \"v2\"\n      },\n      data: listData\n    };\n  }\n\n  function handle(event) {\n    chrome.runtime.onMessageExternal.addListener(function(\n      request,\n      sender,\n      sendResponse\n    ) {\n      if (request.kind == \"quizlet\") {\n        aList = quizletToAlist(request);\n      }\n\n      if (request.kind == \"cram\") {\n        aList = cramToAlist(request);\n      }\n\n      if (request.kind == \"brainscape\") {\n        aList = brainscapeToAlist(request);\n      }\n\n      aList = aList;\n\n      document.querySelector(\"#play-data\").innerHTML = JSON.stringify(aList);\n\n      if (aList) {\n        store.load(aList);\n        push(\"/overview\");\n      }\n    });\n\n    chrome.tabs.query({ active: true, currentWindow: true }, function(tabs) {\n      const load =\n        tabs[0].url.includes(\"cram.com\") ||\n        tabs[0].url.includes(\"quizlet.com\") ||\n        tabs[0].url.includes(\"brainscape.com\");\n\n      if (!load) {\n        show = \"welcome\";\n        return;\n      }\n\n      show = \"\";\n      chrome.tabs.sendMessage(tabs[0].id, { greeting: \"hello\" });\n    });\n  }\n\n  $: console.log(\"show\", show);\n</script>\n\n<style>\n  main {\n    text-align: center;\n    padding: 1em;\n    width: 500px;\n    margin: 0 auto;\n  }\n</style>\n\n{#if show == 'welcome'}\n  <button class=\"br3\" on:click={() => push('/settings')}>Settings</button>\n  <main>\n    <h1>Welcome!</h1>\n    <p>We will only try and load the list from</p>\n    <ul class=\"list\">\n      <li>quizlet.com</li>\n      <li>cram.com</li>\n      <li>brainscape.com</li>\n    </ul>\n\n  </main>\n{/if}\n",
    "<script>\n  import { push } from \"svelte-spa-router\";\n  import { tap } from \"@sveltejs/gestures\";\n\n  // {DomElement}\n  export let listElement;\n  // {DomElement}\n  export let playElement;\n  // learnalist aList object\n  // This is horrible, as it works on aList not alist\n  export let aList;\n\n  playElement.style.display = \"\";\n  listElement.style.display = \"none\";\n\n  let loops = 0;\n  let index = -1;\n  let firstTime = {\n    from: \"Welcome, to beginning,\",\n    to: \"click next, or use the right arrow key..\"\n  };\n\n  let show = firstTime;\n  let nextTimeIsLoop = 0;\n\n  function forward(event) {\n    index += 1;\n\n    if (!aList.data[index]) {\n      index = 0;\n      nextTimeIsLoop = 1;\n    }\n\n    if (nextTimeIsLoop) {\n      loops += 1;\n      nextTimeIsLoop = 0;\n    }\n\n    show = aList.data[index];\n  }\n\n  function backward() {\n    index -= 1;\n    if (index >= 0) {\n      show = aList.data[index];\n    } else {\n      show = firstTime;\n      index = -1;\n    }\n  }\n\n  function handleClose(event) {\n    playElement.style.display = \"none\";\n    listElement.style.display = \"\";\n    push(\"/\");\n  }\n\n  function handleKeydown(event) {\n    switch (event.code) {\n      case \"ArrowLeft\":\n        backward(event);\n        break;\n      case \"Space\":\n      case \"ArrowRight\":\n        forward(event);\n        break;\n      default:\n        console.log(event);\n        console.log(`pressed the ${event.key} key`);\n        break;\n    }\n  }\n\n  function tapHandler(event) {\n    event.preventDefault();\n    const margin = 150;\n    const width = event.target.innerWidth; // window\n    const pageX = event.detail.x; // event.pageX when touchstart\n    const left = 0 + pageX < margin;\n    const right = width - margin < pageX;\n\n    if (left) {\n      backward(event);\n      return;\n    }\n\n    if (right) {\n      forward(event);\n      return;\n    }\n\n    return;\n  }\n</script>\n\n<style>\n  @import \"../../../../all.css\";\n</style>\n\n<svelte:window on:keydown={handleKeydown} use:tap on:tap={tapHandler} />\n<svelte:options tag={null} accessors={true} />\n<article>\n  <header>\n    <h1 class=\"f2 measure\">Slideshow</h1>\n    <button class=\"br3\" on:click={forward}>Next</button>\n    <button class=\"br3\" on:click={handleClose}>Close</button>\n  </header>\n  <blockquote class=\"athelas ml0 mt4 pl4 black-90 bl bw2 b--black\">\n    <div class=\"f3 lh-copy\">\n      <p>{show.from}</p>\n      <p>{show.to}</p>\n    </div>\n    {#if loops > 0}\n      <cite class=\"f6 ttu tracked fs-normal\">\n        - {loops} (Looped over the list)\n      </cite>\n    {/if}\n  </blockquote>\n</article>\n",
    "<script>\n  import Modal from \"./spaced_repetition_modal.svelte\";\n  import { addEntry } from \"./api.js\";\n\n  import { push } from \"svelte-spa-router\";\n  import { tap } from \"@sveltejs/gestures\";\n\n  // {DomElement}\n  export let playElement;\n  // {DomElement}\n  export let listElement;\n  // learnalist aList object\n  export let aList;\n\n  playElement.style.display = \"\";\n  listElement.style.display = \"none\";\n\n  let data;\n  let state = \"edit\";\n  let showKey = \"from\";\n  let show = false;\n\n  function handleClose(event) {\n    playElement.style.display = \"none\";\n    push(\"/\");\n  }\n\n  function edit(event) {\n    // How did this work before?\n    const index = event.target\n      .closest(\"[data-index]\")\n      .getAttribute(\"data-index\");\n\n    if (!index) {\n      return;\n    }\n\n    data = aList.data[index];\n    show = true;\n  }\n\n  function close() {\n    data = null;\n    state = \"edit\";\n    showKey = \"from\";\n    show = false;\n  }\n\n  async function add(event) {\n    const input = {\n      show: data[showKey],\n      data: data,\n      settings: {\n        show: showKey\n      },\n      kind: aList.info.type\n    };\n\n    const response = await addEntry(input);\n    switch (response.status) {\n      case 201:\n        close();\n        break;\n      case 200:\n        state = \"feedback\";\n        data = response.body;\n        break;\n      default:\n        console.log(\"failed to add for spaced learning\");\n        console.log(response);\n        break;\n    }\n  }\n</script>\n\n<style>\n  @import \"../../../../all.css\";\n</style>\n\n<svelte:options tag={null} accessors={true} />\n\n<header>\n  <button class=\"br3\" on:click={handleClose}>Close</button>\n  <h1 class=\"f2 measure\" title=\"Spaced Repetition\">ðŸ§  + ðŸ’ª</h1>\n  <h3>Click on the row you want to add</h3>\n</header>\n\n<div id=\"list-data\">\n  <table class=\"w-100\" cellspacing=\"0\">\n    <thead>\n      <tr>\n        <th class=\"fw6 bb b--black-20 pb3 tl\">From</th>\n        <th class=\"fw6 bb b--black-20 pb3 tl\">To</th>\n      </tr>\n    </thead>\n    <tbody class=\"lh-copy\">\n      {#each aList.data as item, index}\n        <tr data-index={index} on:click={edit}>\n          <td class=\"pv3 pr3 bb b--black-20\">{item.from}</td>\n          <td class=\"pv3 pr3 bb b--black-20\">{item.to}</td>\n        </tr>\n      {/each}\n    </tbody>\n  </table>\n</div>\n\n<Modal {show} {state} on:add={add} on:close={close}>\n  {#if state === 'edit'}\n    <p>\n      <span>Which to show?</span>\n    </p>\n    <p>\n      <input type=\"radio\" bind:group={showKey} value={'from'} />\n      from\n    </p>\n    <p>\n      <input type=\"radio\" bind:group={showKey} value={'to'} />\n      to\n    </p>\n    <pre>{JSON.stringify(data, '', 2)}</pre>\n  {/if}\n\n  {#if state === 'feedback'}\n    <p>Already in the system</p>\n    <p>You will be reminded on {data.settings.when_next}</p>\n  {/if}\n</Modal>\n",
    "<script>\n  import { loggedIn } from \"../../../shared.js\";\n  import { push } from \"svelte-spa-router\";\n  import { createEventDispatcher } from \"svelte\";\n\n  const dispatch = createEventDispatcher();\n  const close = () => dispatch(\"close\");\n\n  export let show;\n  export let state;\n\n  function handleClose() {\n    dispatch(\"close\");\n  }\n\n  function handleLogin() {\n    window.location = \"/login.html\";\n  }\n</script>\n\n<style>\n  @import \"../../../../all.css\";\n\n  .modal-background {\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background: rgba(0, 0, 0, 0.3);\n  }\n\n  .modal {\n    position: absolute;\n    left: 50%;\n    top: 50%;\n    width: calc(100vw - 4em);\n    max-width: 32em;\n    max-height: calc(100vh - 4em);\n    overflow: auto;\n    transform: translate(-50%, -50%);\n    padding: 1em;\n    border-radius: 0.2em;\n    background: white;\n  }\n</style>\n\n<svelte:options tag={null} accessors={true} />\n\n{#if show}\n  <div class=\"modal-background\" on:click={handleClose} />\n\n  <div class=\"modal\" role=\"dialog\" aria-modal=\"true\">\n    {#if loggedIn()}\n      {#if state === 'edit'}\n        <slot />\n        <button class=\"br3\" on:click={() => dispatch('add')}>Add</button>\n      {/if}\n      {#if state === 'feedback'}\n        <slot />\n      {/if}\n    {:else}\n      <p>You need to be logged in to use spaced repetition</p>\n      <button class=\"br3\" on:click={handleLogin}>Login</button>\n    {/if}\n    <button class=\"br3\" on:click={handleClose}>cancel</button>\n  </div>\n{/if}\n",
    "<script>\n  import { createEventDispatcher } from \"svelte\";\n\n  const dispatch = createEventDispatcher();\n  export let data = [];\n\n  let state = \"playing\";\n  let playing = false;\n  // clean the inputs\n  let found = [];\n  let playData = [];\n  let guesses = [];\n  let hasChecked = false;\n\n  playData = data.map(item => {\n    return clean(item);\n  });\n\n  let leftToFind = playData.length;\n\n  playing = true;\n  let perfect = false;\n\n  let feedback = Array(playData.length).fill(\"\");\n  let results = [];\n  let attempts = 0;\n  function check() {\n    attempts = attempts + 1;\n    hasChecked = true;\n    console.log(guesses);\n    results = guesses.map(input => {\n      return clean(input);\n    });\n    // Get the unique results\n    let uniques = Array.from(new Set(results));\n\n    uniques = uniques.filter(item => playData.includes(item));\n\n    let lookUp = uniques.map(item => {\n      return {\n        data: item,\n        position: -1\n      };\n    });\n\n    results.forEach((input, position) => {\n      lookUp = lookUp.map(item => {\n        // skip if already found\n        if (item.position !== -1) {\n          return item;\n        }\n\n        if (item.data !== input) {\n          return item;\n        }\n\n        item.position = position;\n        return item;\n      });\n    });\n\n    // Set all to not found\n    feedback = Array(playData.length).fill(\"notfound\");\n\n    lookUp = lookUp.map(item => {\n      if (item.position === -1) {\n        return item;\n      }\n\n      feedback[item.position] = \"found\";\n      return item;\n    });\n\n    leftToFind = playData.length - uniques.length;\n\n    if (leftToFind === 0) {\n      state = \"finished\";\n      if (attempts === 1) {\n        perfect = JSON.stringify(results) === JSON.stringify(playData);\n      }\n      console.log(\"actual\", JSON.stringify(playData));\n      console.log(\"guesses\", JSON.stringify(results));\n    }\n  }\n\n  function playAgain() {\n    dispatch(\"finished\", {\n      perfect: perfect,\n      attempts: attempts,\n      playAgain: true\n    });\n  }\n\n  function restart() {\n    dispatch(\"finished\", {\n      perfect: perfect,\n      attempts: attempts,\n      playAgain: false\n    });\n  }\n\n  function showMe() {\n    state = \"show-me\";\n  }\n\n  function clean(input) {\n    // TODO have the UI allow for more options\n    return input.toLowerCase();\n  }\n</script>\n\n<style>\n  @import \"../../../../all.css\";\n\n  .notfound {\n    border: 4px solid #ff725c;\n    border-radius: 2px;\n  }\n\n  .found {\n    border: 4px solid #19a974;\n    border-radius: 2px;\n  }\n</style>\n\n{#if state === 'playing'}\n  <p>\n    How many do you remember?\n    {#if hasChecked}{leftToFind} left{/if}\n  </p>\n\n  {#each playData as item, index}\n    <div class=\"pv1\">\n      <input\n        class=\"w-100 {feedback[index]}\"\n        disabled={feedback[index] === 'found'}\n        type=\"text\"\n        placeholder=\"\"\n        bind:value={guesses[index]} />\n    </div>\n  {/each}\n  <div class=\"pv1\">\n    <button class=\"br3\" on:click={check}>check</button>\n    <button class=\"br3\" on:click={showMe}>I give up, show me</button>\n    <button class=\"br3\" on:click={restart}>restart</button>\n  </div>\n{/if}\n\n{#if state === 'finished'}\n  <p>Well done! You did it.</p>\n\n  {#each playData as item, index}\n    <div class=\"pv1\">\n      <input\n        class=\"w-100 {feedback[index]}\"\n        disabled={feedback[index] === 'found'}\n        type=\"text\"\n        placeholder=\"\"\n        bind:value={guesses[index]} />\n    </div>\n  {/each}\n\n  {#if perfect}\n    <p>Perfect recall!</p>\n  {/if}\n  <p>You took {attempts} attempt(s)</p>\n\n  <div class=\"pv1\">\n    <button class=\"br3\" on:click={playAgain}>play again</button>\n    <button class=\"br3\" on:click={restart}>restart</button>\n  </div>\n{/if}\n\n{#if state === 'show-me'}\n  <p>\n    How many do you remember?\n    {#if hasChecked}{leftToFind} left{/if}\n  </p>\n\n  {#each playData as item, index}\n    <div class=\"pv1\">\n      <input\n        class=\"w-100 found\"\n        disabled=\"true\"\n        type=\"text\"\n        placeholder=\"\"\n        value={item} />\n    </div>\n  {/each}\n\n  <div class=\"pv2\">\n    <button class=\"br3\" on:click={playAgain}>play again</button>\n    <button class=\"br3\" on:click={restart}>restart</button>\n  </div>\n{/if}\n",
    "<script>\n  import Recall from \"./recall.svelte\";\n  import View from \"./view.svelte\";\n  import { push } from \"svelte-spa-router\";\n\n  // {DomElement}\n  export let listElement;\n  // {DomElement}\n  export let playElement;\n\n  export let data = [];\n  export let gameSize = 3;\n  export let speed = 1;\n  let showKey = \"from\";\n\n  playElement.style.display = \"\";\n  listElement.style.display = \"none\";\n\n  function handleClose(event) {\n    playElement.style.display = \"none\";\n    listElement.style.display = \"\";\n    push(\"/\");\n  }\n\n  let playData = [];\n  // This needs to pick the data\n  let state = \"not-playing\";\n\n  const shuffle = (arr, key) =>\n    arr\n      .map(a => [Math.random(), a])\n      .sort((a, b) => a[0] - b[0])\n      .map(a => a[1][key]);\n\n  function play() {\n    // reduce to 7\n    // shuffle\n    let temp = shuffle(data, showKey);\n    playData = temp.slice(0, gameSize);\n    state = \"playing\";\n  }\n\n  function finished(event) {\n    if (event.detail.playAgain) {\n      play();\n      return;\n    }\n\n    state = \"not-playing\";\n  }\n\n  function handleFinished() {\n    state = \"recall\";\n  }\n\n  $: maxSize = data.length;\n</script>\n\n<style>\n  @import \"../../../../all.css\";\n</style>\n\n<svelte:options tag={null} accessors={true} />\n\n<article>\n  <header>\n    <h1 class=\"f2 measure\">Total Recall</h1>\n    <button class=\"br3\" on:click={handleClose}>Close</button>\n  </header>\n\n  <div class=\"pv2\">\n    {#if state === 'not-playing'}\n      <h1>Rules</h1>\n      <p>Can you remember all the words?</p>\n      <p>Can you remember the order to make it perfect?</p>\n      <p>How many times do you need to check?</p>\n\n      <p>\n        <span>How many to recall?</span>\n        <input type=\"number\" bind:value={gameSize} max={maxSize} min=\"1\" />\n      </p>\n\n      <p>\n        <span>How fast? (seconds)</span>\n        <input type=\"number\" bind:value={speed} max={5} min=\"1\" />\n      </p>\n\n      <p>\n        <span>Which to show?</span>\n      </p>\n      <p>\n        <input type=\"radio\" bind:group={showKey} value={'from'} />\n        from\n      </p>\n      <p>\n        <input type=\"radio\" bind:group={showKey} value={'to'} />\n        to\n      </p>\n      <pre>{JSON.stringify(data.slice(0, 2), '', 2)}</pre>\n      <button class=\"br3\" on:click={play}>Are you ready to play?</button>\n    {/if}\n\n    {#if state === 'playing'}\n      <View data={playData} on:finished={handleFinished} speed={speed * 1000} />\n    {/if}\n\n    {#if state === 'recall'}\n      <Recall data={playData} on:finished={finished} />\n    {/if}\n\n  </div>\n\n</article>\n",
    "<script>\n  import { createEventDispatcher } from \"svelte\";\n\n  const dispatch = createEventDispatcher();\n\n  export let data = [];\n  // in milliseconds\n  export let speed = 1000;\n  let index = 0;\n  const size = data.length - 1;\n  const cancel = () => {\n    clearInterval(timeout);\n  };\n\n  const timeout = setInterval(() => {\n    show = data[index];\n\n    index = index + 1;\n    if (index <= size) {\n      return;\n    }\n    cancel();\n    dispatch(\"finished\");\n  }, speed);\n\n  $: show = data[index];\n</script>\n\n<style>\n  @import \"../../../../all.css\";\n</style>\n\n<blockquote class=\"athelas ml0 mt4 pl4 black-90 bl bw2 b--black\">\n  <p class=\"f3 lh-copy\">{show}</p>\n</blockquote>\n",
    "<script>\n  import { createEventDispatcher } from \"svelte\";\n\n  const dispatch = createEventDispatcher();\n  const close = () => dispatch(\"close\");\n\n  function handleClose() {\n    dispatch(\"close\");\n  }\n\n  function handleLogin() {\n    const searchParams = new URLSearchParams();\n    const redirectUrl = window.location.href.replace(\n      window.location.origin,\n      \"\"\n    );\n\n    searchParams.set(\"redirect\", redirectUrl);\n    window.location = `/login.html?${searchParams.toString()}`;\n  }\n</script>\n\n<style>\n  .modal-background {\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background: rgba(0, 0, 0, 0.3);\n  }\n\n  .modal {\n    position: absolute;\n    left: 50%;\n    top: 50%;\n    width: calc(100vw - 4em);\n    max-width: 32em;\n    max-height: calc(100vh - 4em);\n    overflow: auto;\n    transform: translate(-50%, -50%);\n    padding: 1em;\n    border-radius: 0.2em;\n    background: white;\n  }\n</style>\n\n<svelte:options tag={null} accessors={true} />\n\n<div class=\"modal-background\" on:click={handleClose} />\n<div class=\"modal\" role=\"dialog\" aria-modal=\"true\">\n  <slot />\n  <button class=\"br3\" on:click={handleLogin}>Login</button>\n  <button class=\"br3\" on:click={handleClose}>cancel</button>\n</div>\n"
  ],
  "names": [],
  "mappings": "AAkCE,EAAE,cAAC,CAAC,AACF,KAAK,CAAE,OAAO,CACd,cAAc,CAAE,SAAS,CACzB,SAAS,CAAE,GAAG,CACd,WAAW,CAAE,EAAE,AACjB,CAAC;ACqED,IAAI,eAAC,CAAC,AACJ,UAAU,CAAE,MAAM,CAClB,OAAO,CAAE,GAAG,CACZ,KAAK,CAAE,KAAK,CACZ,MAAM,CAAE,CAAC,CAAC,IAAI,AAChB,CAAC;ACjBD,QAAQ,qBAAqB,CAAC;ACpB9B,QAAQ,qBAAqB,CAAC;ACvD9B,QAAQ,qBAAqB,CAAC,AAE9B,iBAAiB,eAAC,CAAC,AACjB,QAAQ,CAAE,KAAK,CACf,GAAG,CAAE,CAAC,CACN,IAAI,CAAE,CAAC,CACP,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,CACZ,UAAU,CAAE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,AAChC,CAAC,AAED,MAAM,eAAC,CAAC,AACN,QAAQ,CAAE,QAAQ,CAClB,IAAI,CAAE,GAAG,CACT,GAAG,CAAE,GAAG,CACR,KAAK,CAAE,KAAK,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,CACxB,SAAS,CAAE,IAAI,CACf,UAAU,CAAE,KAAK,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,CAC7B,QAAQ,CAAE,IAAI,CACd,SAAS,CAAE,UAAU,IAAI,CAAC,CAAC,IAAI,CAAC,CAChC,OAAO,CAAE,GAAG,CACZ,aAAa,CAAE,KAAK,CACpB,UAAU,CAAE,KAAK,AACnB,CAAC;ACoED,QAAQ,qBAAqB,CAAC,AAE9B,SAAS,cAAC,CAAC,AACT,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,OAAO,CACzB,aAAa,CAAE,GAAG,AACpB,CAAC,AAED,MAAM,cAAC,CAAC,AACN,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,OAAO,CACzB,aAAa,CAAE,GAAG,AACpB,CAAC;AC/DD,QAAQ,qBAAqB,CAAC;AC9B9B,QAAQ,qBAAqB,CAAC;ACN9B,iBAAiB,eAAC,CAAC,AACjB,QAAQ,CAAE,KAAK,CACf,GAAG,CAAE,CAAC,CACN,IAAI,CAAE,CAAC,CACP,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,CACZ,UAAU,CAAE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,AAChC,CAAC,AAED,MAAM,eAAC,CAAC,AACN,QAAQ,CAAE,QAAQ,CAClB,IAAI,CAAE,GAAG,CACT,GAAG,CAAE,GAAG,CACR,KAAK,CAAE,KAAK,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,CACxB,SAAS,CAAE,IAAI,CACf,UAAU,CAAE,KAAK,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,CAC7B,QAAQ,CAAE,IAAI,CACd,SAAS,CAAE,UAAU,IAAI,CAAC,CAAC,IAAI,CAAC,CAChC,OAAO,CAAE,GAAG,CACZ,aAAa,CAAE,KAAK,CACpB,UAAU,CAAE,KAAK,AACnB,CAAC"
}